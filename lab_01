#include <iostream>
#include <string>

// Структура для хранения данных
struct Data {
    std::string str;
    int integer;
    double floating;
};

// Узел односвязного списка
struct Node {
    Data data;
    Node* next;
};

// Класс односвязного списка
class LinkedList {
private:
    Node* head; // Указатель на начало списка

public:
    // Конструктор
    LinkedList() : head(nullptr) {}

    // Деструктор
    ~LinkedList() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    // Добавление элемента в конец списка
    void append(const Data& data) {
        Node* newNode = new Node{data, nullptr};
        if (!head) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    // Добавление элемента после заданного индекса
    void insertAfter(int index, const Data& data) {
        Node* newNode = new Node{data, nullptr};
        Node* current = head;
        int count = 0;

        while (current && count < index) {
            current = current->next;
            count++;
        }

        if (current) {
            newNode->next = current->next;
            current->next = newNode;
        } else {
            std::cerr << "Index out of range!" << std::endl;
        }
    }

    // Добавление элемента перед заданным индексом
    void insertBefore(int index, const Data& data) {
        if (index == 0) {
            Node* newNode = new Node{data, head};
            head = newNode;
        } else {
            Node* current = head;
            int count = 0;

            while (current && count < index - 1) {
                current = current->next;
                count++;
            }

            if (current) {
                Node* newNode = new Node{data, current->next};
                current->next = newNode;
            } else {
                std::cerr << "Index out of range!" << std::endl;
            }
        }
    }

    // Удаление элемента по заданному индексу
    void remove(int index) {
        if (index == 0) {
            if (head) {
                Node* temp = head;
                head = head->next;
                delete temp;
            }
        } else {
            Node* current = head;
            int count = 0;

            while (current && count < index - 1) {
                current = current->next;
                count++;
            }

            if (current && current->next) {
                Node* temp = current->next;
                current->next = current->next->next;
                delete temp;
            } else {
                std::cerr << "Index out of range!" << std::endl;
            }
        }
    }

    // Вывод всего списка на экран
    void print() const {
        Node* current = head;
        while (current) {
            std::cout << "String: " << current->data.str 
                      << ", Integer: " << current->data.integer 
                      << ", Double: " << current->data.floating << std::endl;
            current = current->next;
        }
    }
};

// Функция main для демонстрации работы со списком
int main() {
    LinkedList list;

    // Добавление элементов в конец списка
    list.append({"First", 1, 1.1});
    list.append({"Second", 2, 2.2});
    list.append({"Third", 3, 3.3});

    std::cout << "Initial list:" << std::endl;
    list.print();

    // Добавление элемента после заданного индекса
    list.insertAfter(1, {"After Second", 4, 4.4});
    std::cout << "\nList after inserting after index 1:" << std::endl;
    list.print();

    // Добавление элемента перед заданным индексом
    list.insertBefore(2, {"Before Third", 5, 5.5});
    std::cout << "\nList after inserting before index 2:" << std::endl;
    list.print();

    // Удаление элемента по заданному индексу
    list.remove(3);
    std::cout << "\nList after removing index 3:" << std::endl;
    list.print();

    return 0;
}
